FILE: Simple.kt
    @R|com/bandlab/metro/station/MetroStation|() public final class MyActivity : R|kotlin/Any| {
        public constructor(): R|MyActivity| {
            super<R|kotlin/Any|>()
        }

    }
    @R|com/bandlab/metro/station/MetroStation|(scope = <getClass>(Q|kotlin/Int|)) public final class MyFragment : R|kotlin/Any| {
        public constructor(): R|MyFragment| {
            super<R|kotlin/Any|>()
        }

    }
    public final fun box(): R|kotlin/String| {
        lval factory: R|<anonymous>| = object : R|MyActivityDependencyGraph| {
            private constructor(): R|<anonymous>| {
                super<R|kotlin/Any|>()
            }

            public open override fun inject(target: R|MyActivity|): R|kotlin/Unit| {
                ^inject Q|kotlin/Unit|
            }

        }

        ^box String(OK)
    }
FILE: /MyActivityDependencyGraph.kt
    @R|dev/zacsweers/metro/DependencyGraph|(scope = <getClass>(Q|MyActivity|)) public abstract interface MyActivityDependencyGraph : R|kotlin/Any| {
        public abstract fun inject(target: R|MyActivity|): R|kotlin/Unit|

        @R|dev/zacsweers/metro/DependencyGraph.Factory|() public abstract interface Factory : R|kotlin/Any| {
            public abstract fun create(@R|dev/zacsweers/metro/Provides|() target: R|MyActivity|): R|MyActivityDependencyGraph|

        }

    }
FILE: /MyFragmentDependencyGraph.kt
    @R|com/bandlab/metro/station/MetroStation|(scope = <getClass>(Q|kotlin/Int|)) public abstract interface MyFragmentDependencyGraph : R|kotlin/Any| {
        public abstract fun inject(target: R|MyFragment|): R|kotlin/Unit|

        @R|dev/zacsweers/metro/DependencyGraph.Factory|() public abstract interface Factory : R|kotlin/Any| {
            public abstract fun create(@R|dev/zacsweers/metro/Provides|() target: R|MyFragment|): R|MyFragmentDependencyGraph|

        }

    }
